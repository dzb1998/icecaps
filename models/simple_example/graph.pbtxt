node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./dummy_data/paired.tfrecord"
      }
    }
  }
}
node {
  name: "flat_filenames/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flat_filenames"
  op: "Reshape"
  input: "Const"
  input: "flat_filenames/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 128
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_8HcFlZxGJL8"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "encoder/rnn/DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "9\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2596454
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2596454
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/max"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/RandomUniform"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Initializer/random_uniform"
  op: "Add"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/mul"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 57
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/Assign"
  op: "Assign"
  input: "encoder/rnn/token_embeddings"
  input: "encoder/rnn/token_embeddings/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/rnn/token_embeddings/read"
  op: "Identity"
  input: "encoder/rnn/token_embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/max"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/RandomUniform"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Initializer/random_uniform"
  op: "Add"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/mul"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/Assign"
  op: "Assign"
  input: "encoder/rnn/token_embed_proj"
  input: "encoder/rnn/token_embed_proj/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/rnn/token_embed_proj/read"
  op: "Identity"
  input: "encoder/rnn/token_embed_proj"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/matmul"
  op: "MatMul"
  input: "encoder/rnn/token_embeddings/read"
  input: "encoder/rnn/token_embed_proj/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/sub"
  op: "Sub"
  input: "encoder/rnn/Cast"
  input: "encoder/rnn/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/count_nonzero/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "encoder/rnn/sub"
  input: "encoder/rnn/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/count_nonzero/Cast"
  op: "Cast"
  input: "encoder/rnn/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/count_nonzero/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/rnn/count_nonzero/Sum"
  op: "Sum"
  input: "encoder/rnn/count_nonzero/Cast"
  input: "encoder/rnn/count_nonzero/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/Cast_1"
  op: "Cast"
  input: "encoder/rnn/count_nonzero/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/Max"
  op: "Max"
  input: "encoder/rnn/Cast_1"
  input: "encoder/rnn/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/Slice/size/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "encoder/rnn/Slice/size"
  op: "Pack"
  input: "encoder/rnn/Slice/size/0"
  input: "encoder/rnn/Max"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/rnn/Slice"
  op: "Slice"
  input: "encoder/rnn/Cast"
  input: "encoder/rnn/Slice/begin"
  input: "encoder/rnn/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/embed_sparse_to_dense/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/matmul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/embed_sparse_to_dense/embedding_lookup"
  op: "GatherV2"
  input: "encoder/rnn/matmul"
  input: "encoder/rnn/Slice"
  input: "encoder/rnn/embed_sparse_to_dense/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/matmul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/embed_sparse_to_dense/embedding_lookup/Identity"
  op: "Identity"
  input: "encoder/rnn/embed_sparse_to_dense/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/Shape"
  op: "Shape"
  input: "encoder/rnn/Slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/strided_slice"
  op: "StridedSlice"
  input: "encoder/rnn/Shape"
  input: "encoder/rnn/strided_slice/stack"
  input: "encoder/rnn/strided_slice/stack_1"
  input: "encoder/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/rnn/rnn/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/range"
  op: "Range"
  input: "encoder/rnn/rnn/range/start"
  input: "encoder/rnn/rnn/Rank"
  input: "encoder/rnn/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/concat/values_0"
  input: "encoder/rnn/rnn/range"
  input: "encoder/rnn/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/transpose"
  op: "Transpose"
  input: "encoder/rnn/embed_sparse_to_dense/embedding_lookup/Identity"
  input: "encoder/rnn/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/sequence_length"
  op: "Identity"
  input: "encoder/rnn/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice"
  op: "StridedSlice"
  input: "encoder/rnn/rnn/Shape"
  input: "encoder/rnn/rnn/strided_slice/stack"
  input: "encoder/rnn/rnn/strided_slice/stack_1"
  input: "encoder/rnn/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "encoder/rnn/rnn/strided_slice"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/Const"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/zeros"
  op: "Fill"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/concat"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "encoder/rnn/rnn/strided_slice"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/stack"
  op: "Pack"
  input: "encoder/rnn/rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/rnn/rnn/Equal"
  op: "Equal"
  input: "encoder/rnn/rnn/Shape_1"
  input: "encoder/rnn/rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/All"
  op: "All"
  input: "encoder/rnn/rnn/Equal"
  input: "encoder/rnn/rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/rnn/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor encoder/rnn/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor encoder/rnn/rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Assert/Assert"
  op: "Assert"
  input: "encoder/rnn/rnn/All"
  input: "encoder/rnn/rnn/Assert/Assert/data_0"
  input: "encoder/rnn/rnn/stack"
  input: "encoder/rnn/rnn/Assert/Assert/data_2"
  input: "encoder/rnn/rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "encoder/rnn/rnn/CheckSeqLen"
  op: "Identity"
  input: "encoder/rnn/rnn/sequence_length"
  input: "^encoder/rnn/rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Shape_2"
  op: "Shape"
  input: "encoder/rnn/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "encoder/rnn/rnn/Shape_2"
  input: "encoder/rnn/rnn/strided_slice_1/stack"
  input: "encoder/rnn/rnn/strided_slice_1/stack_1"
  input: "encoder/rnn/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/rnn/rnn/Shape_3"
  op: "Shape"
  input: "encoder/rnn/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "encoder/rnn/rnn/Shape_3"
  input: "encoder/rnn/rnn/strided_slice_2/stack"
  input: "encoder/rnn/rnn/strided_slice_2/stack_1"
  input: "encoder/rnn/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/rnn/rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/ExpandDims"
  op: "ExpandDims"
  input: "encoder/rnn/rnn/strided_slice_2"
  input: "encoder/rnn/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat_1"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/ExpandDims"
  input: "encoder/rnn/rnn/Const_1"
  input: "encoder/rnn/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/zeros"
  op: "Fill"
  input: "encoder/rnn/rnn/concat_1"
  input: "encoder/rnn/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Min"
  op: "Min"
  input: "encoder/rnn/rnn/CheckSeqLen"
  input: "encoder/rnn/rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/rnn/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Max"
  op: "Max"
  input: "encoder/rnn/rnn/CheckSeqLen"
  input: "encoder/rnn/rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/rnn/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/rnn/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/rnn/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/rnn/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/rnn/rnn/TensorArrayUnstack/Shape"
  input: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/rnn/rnn/TensorArrayUnstack/range/start"
  input: "encoder/rnn/rnn/TensorArrayUnstack/strided_slice"
  input: "encoder/rnn/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/rnn/rnn/TensorArray_1"
  input: "encoder/rnn/rnn/TensorArrayUnstack/range"
  input: "encoder/rnn/rnn/transpose"
  input: "encoder/rnn/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Maximum"
  op: "Maximum"
  input: "encoder/rnn/rnn/Maximum/x"
  input: "encoder/rnn/rnn/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Minimum"
  op: "Minimum"
  input: "encoder/rnn/rnn/strided_slice_1"
  input: "encoder/rnn/rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Enter_1"
  op: "Enter"
  input: "encoder/rnn/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Enter_2"
  op: "Enter"
  input: "encoder/rnn/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Enter_3"
  op: "Enter"
  input: "encoder/rnn/rnn/MultiRNNCellZeroState/MultiRNNCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Merge"
  op: "Merge"
  input: "encoder/rnn/rnn/while/Enter"
  input: "encoder/rnn/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Merge_1"
  op: "Merge"
  input: "encoder/rnn/rnn/while/Enter_1"
  input: "encoder/rnn/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Merge_2"
  op: "Merge"
  input: "encoder/rnn/rnn/while/Enter_2"
  input: "encoder/rnn/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Merge_3"
  op: "Merge"
  input: "encoder/rnn/rnn/while/Enter_3"
  input: "encoder/rnn/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Less"
  op: "Less"
  input: "encoder/rnn/rnn/while/Merge"
  input: "encoder/rnn/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Less/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Less_1"
  op: "Less"
  input: "encoder/rnn/rnn/while/Merge_1"
  input: "encoder/rnn/rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "encoder/rnn/rnn/while/Less"
  input: "encoder/rnn/rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/LoopCond"
  op: "LoopCond"
  input: "encoder/rnn/rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Switch"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Merge"
  input: "encoder/rnn/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Switch_1"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Merge_1"
  input: "encoder/rnn/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Switch_2"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Merge_2"
  input: "encoder/rnn/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Switch_3"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Merge_3"
  input: "encoder/rnn/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Identity"
  op: "Identity"
  input: "encoder/rnn/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Identity_1"
  op: "Identity"
  input: "encoder/rnn/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Identity_2"
  op: "Identity"
  input: "encoder/rnn/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Identity_3"
  op: "Identity"
  input: "encoder/rnn/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/add/y"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/add"
  op: "Add"
  input: "encoder/rnn/rnn/while/Identity"
  input: "encoder/rnn/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/rnn/rnn/while/TensorArrayReadV3/Enter"
  input: "encoder/rnn/rnn/while/Identity_1"
  input: "encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "encoder/rnn/rnn/while/Identity_1"
  input: "encoder/rnn/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice/begin"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice/size"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice"
  op: "Slice"
  input: "encoder/rnn/rnn/while/Identity_3"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice/begin"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/max"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/mul"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Read/Identity"
  op: "Identity"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Assign"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Read/Identity"
  op: "Identity"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice/begin"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice/size"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
  op: "Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice/begin"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1/begin"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1/size"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1"
  op: "Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1/begin"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat/axis"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/while/TensorArrayReadV3"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul"
  op: "MatMul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd"
  op: "BiasAdd"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Const"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split/split_dim"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split"
  op: "Split"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split/split_dim"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add/y"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add"
  op: "Add"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split:2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  op: "Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul"
  op: "Mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh"
  op: "Tanh"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1"
  op: "Mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
  op: "Add"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  op: "Tanh"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
  op: "Mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1/axis"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice/begin"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice/size"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice"
  op: "Slice"
  input: "encoder/rnn/rnn/while/Identity_3"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice/begin"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/max"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/mul"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Read/Identity"
  op: "Identity"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Assign"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Read/Identity"
  op: "Identity"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice/begin"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice/size"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
  op: "Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice/begin"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1/begin"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1/size"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1"
  op: "Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1/begin"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat/axis"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul"
  op: "MatMul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd"
  op: "BiasAdd"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Const"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split/split_dim"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split"
  op: "Split"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split/split_dim"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add/y"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add"
  op: "Add"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split:2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  op: "Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul"
  op: "Mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh"
  op: "Tanh"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1"
  op: "Mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
  op: "Add"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  op: "Tanh"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
  op: "Mul"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1/axis"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat/axis"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Select"
  op: "Select"
  input: "encoder/rnn/rnn/while/GreaterEqual"
  input: "encoder/rnn/rnn/while/Select/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Select/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Select_1"
  op: "Select"
  input: "encoder/rnn/rnn/while/GreaterEqual"
  input: "encoder/rnn/rnn/while/Identity_3"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/rnn/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/rnn/rnn/while/Identity_1"
  input: "encoder/rnn/rnn/while/Select"
  input: "encoder/rnn/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/add_1/y"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/add_1"
  op: "Add"
  input: "encoder/rnn/rnn/while/Identity_1"
  input: "encoder/rnn/rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/NextIteration"
  op: "NextIteration"
  input: "encoder/rnn/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/rnn/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/rnn/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/rnn/rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Exit"
  op: "Exit"
  input: "encoder/rnn/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Exit_1"
  op: "Exit"
  input: "encoder/rnn/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Exit_2"
  op: "Exit"
  input: "encoder/rnn/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/while/Exit_3"
  op: "Exit"
  input: "encoder/rnn/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/rnn/rnn/TensorArray"
  input: "encoder/rnn/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayStack/range"
  op: "Range"
  input: "encoder/rnn/rnn/TensorArrayStack/range/start"
  input: "encoder/rnn/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/rnn/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/rnn/rnn/TensorArray"
  input: "encoder/rnn/rnn/TensorArrayStack/range"
  input: "encoder/rnn/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/range_1"
  op: "Range"
  input: "encoder/rnn/rnn/range_1/start"
  input: "encoder/rnn/rnn/Rank_1"
  input: "encoder/rnn/rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/concat_2"
  op: "ConcatV2"
  input: "encoder/rnn/rnn/concat_2/values_0"
  input: "encoder/rnn/rnn/range_1"
  input: "encoder/rnn/rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/rnn/rnn/transpose_1"
  op: "Transpose"
  input: "encoder/rnn/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/rnn/rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "encoder/Identity"
  op: "Identity"
  input: "encoder/rnn/matmul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "decoder/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/strided_slice"
  op: "StridedSlice"
  input: "decoder/Shape"
  input: "decoder/strided_slice/stack"
  input: "decoder/strided_slice/stack_1"
  input: "decoder/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/initial_state/Switch"
  op: "Switch"
  input: "decoder/Const"
  input: "decoder/Const"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/switch_t"
  op: "Identity"
  input: "decoder/initial_state/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/switch_f"
  op: "Identity"
  input: "decoder/initial_state/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/pred_id"
  op: "Identity"
  input: "decoder/Const"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/Shape"
  op: "Shape"
  input: "decoder/initial_state/tile_batch/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/Shape/Switch"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Exit_3"
  input: "decoder/initial_state/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Exit_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/ExpandDims/dim"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/ExpandDims"
  op: "ExpandDims"
  input: "decoder/initial_state/tile_batch/Shape/Switch:1"
  input: "decoder/initial_state/tile_batch/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/Tile/multiples"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/Tile"
  op: "Tile"
  input: "decoder/initial_state/tile_batch/ExpandDims"
  input: "decoder/initial_state/tile_batch/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice/stack"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice/stack_1"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice/stack_2"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice"
  op: "StridedSlice"
  input: "decoder/initial_state/tile_batch/Shape"
  input: "decoder/initial_state/tile_batch/strided_slice/stack"
  input: "decoder/initial_state/tile_batch/strided_slice/stack_1"
  input: "decoder/initial_state/tile_batch/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/mul/y"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/mul"
  op: "Mul"
  input: "decoder/initial_state/tile_batch/strided_slice"
  input: "decoder/initial_state/tile_batch/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice_1/stack"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice_1/stack_1"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice_1/stack_2"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/strided_slice_1"
  op: "StridedSlice"
  input: "decoder/initial_state/tile_batch/Shape"
  input: "decoder/initial_state/tile_batch/strided_slice_1/stack"
  input: "decoder/initial_state/tile_batch/strided_slice_1/stack_1"
  input: "decoder/initial_state/tile_batch/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/concat/values_0"
  op: "Pack"
  input: "decoder/initial_state/tile_batch/mul"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/concat/axis"
  op: "Const"
  input: "^decoder/initial_state/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/concat"
  op: "ConcatV2"
  input: "decoder/initial_state/tile_batch/concat/values_0"
  input: "decoder/initial_state/tile_batch/strided_slice_1"
  input: "decoder/initial_state/tile_batch/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/tile_batch/Reshape"
  op: "Reshape"
  input: "decoder/initial_state/tile_batch/Tile"
  input: "decoder/initial_state/tile_batch/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/Switch_1"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Exit_3"
  input: "decoder/initial_state/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Exit_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/initial_state/Merge"
  op: "Merge"
  input: "decoder/initial_state/Switch_1"
  input: "decoder/initial_state/tile_batch/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.80000001
      }
    }
  }
}
node {
  name: "decoder/DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.80000001
      }
    }
  }
}
node {
  name: "decoder/Cast"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/sub"
  op: "Sub"
  input: "decoder/Cast"
  input: "decoder/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/count_nonzero/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "decoder/sub"
  input: "decoder/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/count_nonzero/Cast"
  op: "Cast"
  input: "decoder/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/count_nonzero/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/count_nonzero/Sum"
  op: "Sum"
  input: "decoder/count_nonzero/Cast"
  input: "decoder/count_nonzero/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/Cast_1"
  op: "Cast"
  input: "decoder/count_nonzero/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/Max"
  op: "Max"
  input: "decoder/Cast_1"
  input: "decoder/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/Slice/size/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/Slice/size"
  op: "Pack"
  input: "decoder/Slice/size/0"
  input: "decoder/Max"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/Slice"
  op: "Slice"
  input: "decoder/Cast"
  input: "decoder/Slice/begin"
  input: "decoder/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/embed_sparse_to_dense/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/embed_sparse_to_dense/embedding_lookup"
  op: "GatherV2"
  input: "encoder/Identity"
  input: "decoder/Slice"
  input: "decoder/embed_sparse_to_dense/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/embed_sparse_to_dense/embedding_lookup/Identity"
  op: "Identity"
  input: "decoder/embed_sparse_to_dense/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Shape_1"
  op: "Shape"
  input: "decoder/Slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/strided_slice_1"
  op: "StridedSlice"
  input: "decoder/Shape_1"
  input: "decoder/strided_slice_1/stack"
  input: "decoder/strided_slice_1/stack_1"
  input: "decoder/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/ones/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/ones/mul"
  op: "Mul"
  input: "decoder/strided_slice_1"
  input: "decoder/ones/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/ones/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "decoder/ones/Less"
  op: "Less"
  input: "decoder/ones/mul"
  input: "decoder/ones/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/ones/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/ones/packed"
  op: "Pack"
  input: "decoder/strided_slice_1"
  input: "decoder/ones/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/ones/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/ones"
  op: "Fill"
  input: "decoder/ones/packed"
  input: "decoder/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/mul"
  op: "Mul"
  input: "decoder/ones"
  input: "decoder/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/embed_sparse_to_dense_1/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/embed_sparse_to_dense_1/embedding_lookup"
  op: "GatherV2"
  input: "encoder/Identity"
  input: "decoder/mul"
  input: "decoder/embed_sparse_to_dense_1/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/embed_sparse_to_dense_1/embedding_lookup/Identity"
  op: "Identity"
  input: "decoder/embed_sparse_to_dense_1/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/concat"
  op: "ConcatV2"
  input: "decoder/embed_sparse_to_dense_1/embedding_lookup/Identity"
  input: "decoder/embed_sparse_to_dense/embedding_lookup/Identity"
  input: "decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/add"
  op: "Add"
  input: "decoder/Cast_1"
  input: "decoder/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/add_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/add_1"
  op: "Add"
  input: "decoder/Max"
  input: "decoder/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/ones_1/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/ones_1/mul"
  op: "Mul"
  input: "decoder/strided_slice_1"
  input: "decoder/ones_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/ones_1/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "decoder/ones_1/Less"
  op: "Less"
  input: "decoder/ones_1/mul"
  input: "decoder/ones_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/ones_1/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/ones_1/packed"
  op: "Pack"
  input: "decoder/strided_slice_1"
  input: "decoder/ones_1/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/ones_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/ones_1"
  op: "Fill"
  input: "decoder/ones_1/packed"
  input: "decoder/ones_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/mul_1"
  op: "Mul"
  input: "decoder/ones_1"
  input: "decoder/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/concat_1"
  op: "ConcatV2"
  input: "decoder/Slice"
  input: "decoder/mul_1"
  input: "decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/Range"
  op: "Range"
  input: "decoder/SequenceMask/Const"
  input: "decoder/add_1"
  input: "decoder/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "decoder/add"
  input: "decoder/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/Cast"
  op: "Cast"
  input: "decoder/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/Less"
  op: "Less"
  input: "decoder/SequenceMask/Range"
  input: "decoder/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/SequenceMask/Cast_1"
  op: "Cast"
  input: "decoder/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/range"
  op: "Range"
  input: "decoder/train_decoder/training_helper/range/start"
  input: "decoder/train_decoder/training_helper/Rank"
  input: "decoder/train_decoder/training_helper/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/concat"
  op: "ConcatV2"
  input: "decoder/train_decoder/training_helper/concat/values_0"
  input: "decoder/train_decoder/training_helper/range"
  input: "decoder/train_decoder/training_helper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/transpose"
  op: "Transpose"
  input: "decoder/concat"
  input: "decoder/train_decoder/training_helper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/Shape"
  op: "Shape"
  input: "decoder/train_decoder/training_helper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice"
  op: "StridedSlice"
  input: "decoder/train_decoder/training_helper/Shape"
  input: "decoder/train_decoder/training_helper/strided_slice/stack"
  input: "decoder/train_decoder/training_helper/strided_slice/stack_1"
  input: "decoder/train_decoder/training_helper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArray"
  op: "TensorArrayV3"
  input: "decoder/train_decoder/training_helper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "decoder/train_decoder/training_helper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/Shape"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice/stack"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice/stack_1"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/range"
  op: "Range"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/range/start"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/strided_slice"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "decoder/train_decoder/training_helper/TensorArray"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/range"
  input: "decoder/train_decoder/training_helper/transpose"
  input: "decoder/train_decoder/training_helper/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/strided_slice_1"
  op: "StridedSlice"
  input: "decoder/train_decoder/training_helper/transpose"
  input: "decoder/train_decoder/training_helper/strided_slice_1/stack"
  input: "decoder/train_decoder/training_helper/strided_slice_1/stack_1"
  input: "decoder/train_decoder/training_helper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/zeros_like"
  op: "ZerosLike"
  input: "decoder/train_decoder/training_helper/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/training_helper/Size"
  op: "Size"
  input: "decoder/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Equal/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Equal"
  op: "Equal"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Equal/x"
  input: "decoder/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/All"
  op: "All"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Equal"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/All"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/switch_t"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/switch_f"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch_1"
  op: "Switch"
  input: "decoder/train_decoder/training_helper/zeros_like"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/zeros_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "decoder/train_decoder/training_helper/TensorArray"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Merge"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims"
  op: "ExpandDims"
  input: "decoder/train_decoder/training_helper/Size"
  input: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 57
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims"
  input: "decoder/train_decoder/dynamic_decode/decoder/Const"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros"
  op: "Fill"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_1"
  op: "ExpandDims"
  input: "decoder/train_decoder/training_helper/Size"
  input: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 57
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_2"
  op: "ExpandDims"
  input: "decoder/train_decoder/training_helper/Size"
  input: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_1"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/Const_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros_1"
  op: "Fill"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_3"
  op: "ExpandDims"
  input: "decoder/train_decoder/training_helper/Size"
  input: "decoder/train_decoder/dynamic_decode/decoder/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/LessEqual"
  op: "LessEqual"
  input: "decoder/add_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/LogicalOr"
  op: "LogicalOr"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/Equal"
  input: "decoder/train_decoder/dynamic_decode/decoder/LessEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros_like/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/zeros_like"
  op: "Fill"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros_like/Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArray"
  op: "TensorArrayV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_1"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_2"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_3"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_4"
  op: "Enter"
  input: "decoder/initial_state/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_5"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_6"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_7"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_1"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_2"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_3"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_3"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_4"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_4"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_5"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_5"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_6"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_6"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_7"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Enter_7"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Less"
  op: "Less"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Less/Enter"
  op: "Enter"
  input: "decoder/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Const"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/All"
  op: "All"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_6"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/All"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalAnd"
  op: "LogicalAnd"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Less"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  op: "LoopCond"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_1"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_2"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_3"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_3"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_4"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_4"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_5"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_5"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_6"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_6"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_7"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Merge_7"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_2"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_3"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_5"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_7"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/add/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/add"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice/begin"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice/size"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice"
  op: "Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice/begin"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/max"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/mul"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Read/Identity"
  op: "Identity"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Read/Identity"
  op: "Identity"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice/begin"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice/size"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
  op: "Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice/begin"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1/begin"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1/size"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1"
  op: "Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1/begin"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat/axis"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_5"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul"
  op: "MatMul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter"
  op: "Enter"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter"
  op: "Enter"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Const"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split/split_dim"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split"
  op: "Split"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split/split_dim"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split:2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  op: "Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  op: "Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh"
  op: "Tanh"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  op: "Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  op: "Tanh"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1/axis"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/rate"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19999999
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub/x"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub"
  op: "Sub"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub/x"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  op: "Sub"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/add"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Floor"
  op: "Floor"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv"
  op: "RealDiv"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice/begin"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice/size"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice"
  op: "Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice/begin"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/max"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/mul"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Read/Identity"
  op: "Identity"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Read/Identity"
  op: "Identity"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice/begin"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice/size"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
  op: "Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice/begin"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1/begin"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1/size"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1"
  op: "Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1/begin"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat/axis"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul"
  op: "MatMul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter"
  op: "Enter"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter"
  op: "Enter"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Const"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split/split_dim"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split"
  op: "Split"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split/split_dim"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split:2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  op: "Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  op: "Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh"
  op: "Tanh"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  op: "Sigmoid"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  op: "Tanh"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1/axis"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/rate"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19999999
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub/x"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub"
  op: "Sub"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub/x"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/add"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Floor"
  op: "Floor"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv"
  op: "RealDiv"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul"
  op: "Mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat/axis"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\0009\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.22268088
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.22268088
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/max"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/mul"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/Assign"
  op: "Assign"
  input: "decoder/decoder/output_layer/kernel"
  input: "decoder/decoder/output_layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/decoder/output_layer/kernel/read"
  op: "Identity"
  input: "decoder/decoder/output_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 57
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/output_layer/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/decoder/output_layer/bias/Assign"
  op: "Assign"
  input: "decoder/decoder/output_layer/bias"
  input: "decoder/decoder/output_layer/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/decoder/output_layer/bias/read"
  op: "Identity"
  input: "decoder/decoder/output_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul"
  op: "MatMul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter"
  op: "Enter"
  input: "decoder/decoder/output_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd"
  op: "BiasAdd"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter"
  op: "Enter"
  input: "decoder/decoder/output_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  op: "ArgMax"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  op: "Cast"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  op: "GreaterEqual"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  op: "Enter"
  input: "decoder/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  op: "All"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  op: "Enter"
  input: "decoder/train_decoder/training_helper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "decoder/train_decoder/training_helper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/add_1/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/add_1"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Fill"
  op: "Fill"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Select"
  op: "Select"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalNot_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Fill"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
  op: "Select"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Select_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Select_1/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Select_2"
  op: "Select"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Select_2/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Select_2/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Select_3"
  op: "Select"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Select_2"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/add_2/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/add_2"
  op: "Add"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Select"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_1"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_2"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_3"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_4"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_5"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_6"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_7"
  op: "Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range"
  op: "Range"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range/start"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArraySizeV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 57
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/range/start"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/range"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/range"
  op: "Range"
  input: "decoder/train_decoder/dynamic_decode/decoder/range/start"
  input: "decoder/train_decoder/dynamic_decode/decoder/Rank"
  input: "decoder/train_decoder/dynamic_decode/decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_2"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_2/values_0"
  input: "decoder/train_decoder/dynamic_decode/decoder/range"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/transpose"
  op: "Transpose"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/range_1"
  op: "Range"
  input: "decoder/train_decoder/dynamic_decode/decoder/range_1/start"
  input: "decoder/train_decoder/dynamic_decode/decoder/Rank_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_3/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/concat_3"
  op: "ConcatV2"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_3/values_0"
  input: "decoder/train_decoder/dynamic_decode/decoder/range_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/decoder/transpose_1"
  op: "Transpose"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/Identity"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/LogSoftmax"
  op: "LogSoftmax"
  input: "decoder/train_decoder/dynamic_decode/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/train_decoder/dynamic_decode/ArgMax"
  op: "ArgMax"
  input: "decoder/train_decoder/dynamic_decode/LogSoftmax"
  input: "decoder/train_decoder/dynamic_decode/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/strided_slice"
  op: "StridedSlice"
  input: "decoder/build_loss/sequence_loss/Shape"
  input: "decoder/build_loss/sequence_loss/strided_slice/stack"
  input: "decoder/build_loss/sequence_loss/strided_slice/stack_1"
  input: "decoder/build_loss/sequence_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape/shape/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape/shape"
  op: "Pack"
  input: "decoder/build_loss/sequence_loss/Reshape/shape/0"
  input: "decoder/build_loss/sequence_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape"
  op: "Reshape"
  input: "decoder/train_decoder/dynamic_decode/Identity"
  input: "decoder/build_loss/sequence_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape_1"
  op: "Reshape"
  input: "decoder/concat_1"
  input: "decoder/build_loss/sequence_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "decoder/build_loss/sequence_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "decoder/build_loss/sequence_loss/Reshape"
  input: "decoder/build_loss/sequence_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Reshape_2"
  op: "Reshape"
  input: "decoder/SequenceMask/Cast_1"
  input: "decoder/build_loss/sequence_loss/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/mul"
  op: "Mul"
  input: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "decoder/build_loss/sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Sum"
  op: "Sum"
  input: "decoder/build_loss/sequence_loss/mul"
  input: "decoder/build_loss/sequence_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/Sum_1"
  op: "Sum"
  input: "decoder/SequenceMask/Cast_1"
  input: "decoder/build_loss/sequence_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-12
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/add"
  op: "Add"
  input: "decoder/build_loss/sequence_loss/Sum_1"
  input: "decoder/build_loss/sequence_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/build_loss/sequence_loss/truediv"
  op: "RealDiv"
  input: "decoder/build_loss/sequence_loss/Sum"
  input: "decoder/build_loss/sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/reported_loss"
  op: "Identity"
  input: "decoder/build_loss/sequence_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Fill"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/Shape"
  input: "decoder/optimizer/gradients/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_count_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Merge"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/f_count_1"
  input: "decoder/optimizer/gradients/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/Merge"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Add/y"
  op: "Const"
  input: "^decoder/train_decoder/dynamic_decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/Switch:1"
  input: "decoder/optimizer/gradients/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/Add"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_sync"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_count_2"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Merge_1"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/b_count_1"
  input: "decoder/optimizer/gradients/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "decoder/optimizer/gradients/gradients/Merge_1"
  input: "decoder/optimizer/gradients/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_2"
  op: "LoopCond"
  input: "decoder/optimizer/gradients/gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_1"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/Merge_1"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/Switch_1:1"
  input: "decoder/optimizer/gradients/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/NextIteration_1"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/Sub"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_count_4"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Merge_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/f_count_4"
  input: "decoder/optimizer/gradients/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_2"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/Merge_2"
  input: "encoder/rnn/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Add_1/y"
  op: "Const"
  input: "^encoder/rnn/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Add_1"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/Switch_2:1"
  input: "decoder/optimizer/gradients/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/NextIteration_2"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/Add_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_count_5"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_5"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Merge_3"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/b_count_5"
  input: "decoder/optimizer/gradients/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "decoder/optimizer/gradients/gradients/Merge_3"
  input: "decoder/optimizer/gradients/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_6"
  op: "LoopCond"
  input: "decoder/optimizer/gradients/gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_3"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/Merge_3"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/Switch_3:1"
  input: "decoder/optimizer/gradients/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/NextIteration_3"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/Sub_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/b_count_7"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Shape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/Fill"
  input: "decoder/build_loss/sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Neg"
  op: "Neg"
  input: "decoder/build_loss/sequence_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Neg"
  input: "decoder/build_loss/sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/RealDiv_1"
  input: "decoder/build_loss/sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/Fill"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/mul"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/truediv_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Shape"
  op: "Shape"
  input: "decoder/build_loss/sequence_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Tile"
  op: "Tile"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Shape"
  op: "Shape"
  input: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder/build_loss/sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Shape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Tile"
  input: "decoder/build_loss/sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  op: "PreventGradient"
  input: "decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/mul_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Reshape_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Reshape_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decoder/train_decoder/dynamic_decode/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/transpose_grad/transpose"
  op: "Transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/build_loss/sequence_loss/Reshape_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/range"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/transpose_grad/transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_2_grad/b_exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_4_grad/b_exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Exit_5_grad/b_exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_2_grad/b_switch"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_4_grad/b_switch"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_5_grad/b_switch"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_5_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_2_grad/Switch:1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^decoder/optimizer/gradients/gradients/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/Merge_grad/cond_grad"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_4_grad/Exit"
  input: "decoder/initial_state/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_4_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like"
  op: "ZerosLike"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select"
  op: "Select"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_4_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_6"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select_1"
  op: "Select"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/zeros_like"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_4_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_5_grad/Exit"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Enter_5_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_5_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/zeros_like/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/Select"
  op: "Select"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/Select_1"
  op: "Select"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/zeros_like"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_4"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Exit_3"
  input: "decoder/initial_state/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Identity"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Shape_1"
  op: "Shape"
  input: "decoder/optimizer/gradients/gradients/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_1/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_1"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/Shape_1"
  input: "decoder/optimizer/gradients/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/Merge_grad/cond_grad"
  input: "decoder/optimizer/gradients/gradients/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Reshape_grad/Shape"
  op: "Shape"
  input: "decoder/initial_state/tile_batch/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Reshape_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/Merge_grad/cond_grad:1"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_5"
  op: "Switch"
  input: "decoder/train_decoder/training_helper/zeros_like"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Identity_1"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Shape_2"
  op: "Shape"
  input: "decoder/optimizer/gradients/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_2/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Identity_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_2"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/Shape_2"
  input: "decoder/optimizer/gradients/gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/zeros_2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decoder/train_decoder/training_helper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_sync"
  op: "ControlTrigger"
  input: "^decoder/optimizer/gradients/gradients/StackPushV2"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_6"
  op: "Switch"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Shape_3"
  op: "Shape"
  input: "decoder/optimizer/gradients/gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/Shape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/Shape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/Enter"
  input: "decoder/optimizer/gradients/gradients/Shape_3"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_7"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/Switch_7/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/Shape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_7/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/Shape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/Switch_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_3/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_3"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/zeros_3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Shape"
  op: "Shape"
  input: "decoder/initial_state/tile_batch/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/stack"
  op: "Pack"
  input: "decoder/initial_state/tile_batch/Tile/multiples"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/transpose"
  op: "Transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/stack"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/range"
  op: "Range"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/range/start"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Size"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Reshape_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/mod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/mod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_8"
  op: "Switch"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Identity_2"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Shape_4"
  op: "Shape"
  input: "decoder/optimizer/gradients/gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_4/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Identity_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_4"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/Shape_4"
  input: "decoder/optimizer/gradients/gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "decoder/optimizer/gradients/gradients/zeros_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Const_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_9"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/Const_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/Const_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "decoder/optimizer/gradients/gradients/Switch_9:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/training_helper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Shape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_1"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1_grad/cond_grad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_2"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/Select_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder/decoder/output_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_1_grad/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 57
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/ExpandDims_grad/Shape"
  op: "Shape"
  input: "decoder/initial_state/tile_batch/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Tile_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2_grad/cond_grad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch_1_grad/cond_grad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/Floor"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Switch_10"
  op: "Switch"
  input: "encoder/rnn/rnn/while/Exit_3"
  input: "decoder/initial_state/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Identity_3"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/Shape_5"
  op: "Shape"
  input: "decoder/optimizer/gradients/gradients/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_5/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Identity_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_5"
  op: "Fill"
  input: "decoder/optimizer/gradients/gradients/Shape_5"
  input: "decoder/optimizer/gradients/gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Shape/Switch_grad/cond_grad"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/zeros_5"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/zeros_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_1"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/train_decoder/training_helper/TensorArray"
  input: "decoder/optimizer/gradients/gradients/AddN_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/AddN_1"
  input: "^decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/training_helper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/train_decoder/training_helper/TensorArrayUnstack/range"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/sub"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Neg"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_2"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/Switch_1_grad/cond_grad"
  input: "decoder/optimizer/gradients/gradients/decoder/initial_state/tile_batch/Shape/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/initial_state/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decoder/train_decoder/training_helper/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/transpose_grad/transpose"
  op: "Transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_3"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/dropout/truediv_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/AddN_3"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Exit_3_grad/b_exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/concat/axis"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Shape"
  op: "Shape"
  input: "decoder/embed_sparse_to_dense_1/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/embed_sparse_to_dense_1/embedding_lookup/Identity"
  input: "decoder/embed_sparse_to_dense/embedding_lookup/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/transpose_grad/transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/training_helper/transpose_grad/transpose"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Switch_3_grad/b_switch"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_4"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_4"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_4"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "9\000\000\000\000\000\000\000@\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Size"
  op: "Size"
  input: "decoder/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Size"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ToInt32"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice/stack"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice/stack_1"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ExpandDims"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/strided_slice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/mul"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "9\000\000\000\000\000\000\000@\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Size"
  op: "Size"
  input: "decoder/Slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Size"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ToInt32"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_1"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/strided_slice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "encoder/rnn/rnn/while/Identity_3"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1"
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Merge_3_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/Enter"
  input: "encoder/rnn/rnn/while/GreaterEqual"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/zeros_like"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat_1"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense/embedding_lookup_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/Enter_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/Enter_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/mod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/Enter_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/mod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_1_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Tanh_grad/TanhGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/add_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Sigmoid_2_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split_grad/concat/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_5"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_5"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_5"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/Floor"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/sub"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Neg"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_6"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/Slice_grad/Pad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/AddN_6"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_7"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/dropout/truediv_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/AddN_7"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_1_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Tanh_grad/TanhGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/add_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Sigmoid_2_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split_grad/concat/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_8"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_8"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_8"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/ShapeN/StackPopV2_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_9"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/AddN_9"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_10"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_1_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/Slice_grad/Pad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/AddN_10"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_1_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Tanh_grad/TanhGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/add_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Sigmoid_2_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split_grad/concat/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_11"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_11"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/AddN_11"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Mul/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_5"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter_1"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape_1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Sum_1"
  op: "Sum"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Sum_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_1_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Tanh_grad/TanhGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/add_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Sigmoid_2_grad/SigmoidGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split_grad/concat/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_12"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/Slice_grad/Pad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
  op: "Shape"
  input: "decoder/train_decoder/dynamic_decode/decoder/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/AddN_12"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_13"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/Slice_grad/Pad"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/Slice_grad/Pad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Read/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/Enter"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/mod"
  op: "FloorMod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN"
  op: "ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter"
  input: "encoder/rnn/rnn/while/TensorArrayReadV3"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/Enter_1"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/mod"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ConcatOffset"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice_1"
  op: "Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ConcatOffset:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/rnn/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/rnn/rnn/while/Identity_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/concat_grad/Slice_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "decoder/optimizer/gradients/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_14"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_1_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/Slice_grad/Pad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Rank"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape"
  op: "Shape"
  input: "encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/stack/1"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Rank"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape/Const"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape/Const"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
  op: "Shape"
  input: "encoder/rnn/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape_1"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc_1"
  op: "StackV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Enter_1"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPushV2_1"
  op: "StackPushV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/Enter_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Shape"
  input: "^decoder/optimizer/gradients/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1"
  op: "StackPopV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/StackPopV2_1/Enter"
  op: "Enter"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub_1"
  op: "Sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/sub_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/concat/axis"
  op: "Const"
  input: "^decoder/optimizer/gradients/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Pad"
  op: "Pad"
  input: "decoder/optimizer/gradients/gradients/AddN_14"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/rnn/rnn/TensorArray_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "decoder/optimizer/gradients/gradients"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/rnn/rnn/TensorArrayUnstack/range"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/AddN_15"
  op: "AddN"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/Slice_grad/Pad"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/Slice_grad/Pad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/rnn/rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "decoder/optimizer/gradients/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/matmul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "9\000\000\000\000\000\000\000@\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/matmul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Size"
  op: "Size"
  input: "encoder/rnn/Slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Size"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ToInt32"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/strided_slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/transpose_grad/transpose"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "encoder/rnn/Slice"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat_2"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/concat"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Reshape"
  input: "decoder/optimizer/gradients/gradients/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/concat_3"
  op: "ConcatV2"
  input: "decoder/optimizer/gradients/gradients/concat_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/embed_sparse_to_dense/embedding_lookup_grad/Reshape_1"
  input: "decoder/optimizer/gradients/gradients/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice"
  op: "StridedSlice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ToInt32"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice/stack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice/stack_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/a"
  op: "UnsortedSegmentSum"
  input: "decoder/optimizer/gradients/gradients/concat_2"
  input: "decoder/optimizer/gradients/gradients/concat_3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul"
  op: "MatMul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul/a"
  input: "encoder/rnn/token_embed_proj/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/optimizer/gradients/gradients/decoder/embed_sparse_to_dense_1/embedding_lookup_grad/ToInt32"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice/stack"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice/stack_1"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/b"
  op: "UnsortedSegmentSum"
  input: "decoder/optimizer/gradients/gradients/concat_2"
  input: "decoder/optimizer/gradients/gradients/concat_3"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/rnn/token_embeddings/read"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1/b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_6"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_7"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_8"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_9"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_10"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/L2Loss_11"
  op: "L2Loss"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/stack"
  op: "Pack"
  input: "decoder/optimizer/gradients/global_norm/L2Loss"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_1"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_2"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_3"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_4"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_5"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_6"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_7"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_8"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_9"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_10"
  input: "decoder/optimizer/gradients/global_norm/L2Loss_11"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/Sum"
  op: "Sum"
  input: "decoder/optimizer/gradients/global_norm/stack"
  input: "decoder/optimizer/gradients/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/global_norm/Sum"
  input: "decoder/optimizer/gradients/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/global_norm/global_norm"
  op: "Sqrt"
  input: "decoder/optimizer/gradients/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/VerifyFinite/CheckNumerics"
  op: "CheckNumerics"
  input: "decoder/optimizer/gradients/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Found Inf or NaN global norm."
    }
  }
}
node {
  name: "decoder/optimizer/gradients/VerifyFinite/control_dependency"
  op: "Identity"
  input: "decoder/optimizer/gradients/global_norm/global_norm"
  input: "^decoder/optimizer/gradients/VerifyFinite/CheckNumerics"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/clip_by_global_norm/truediv/x"
  input: "decoder/optimizer/gradients/VerifyFinite/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "decoder/optimizer/gradients/clip_by_global_norm/Const"
  input: "decoder/optimizer/gradients/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "decoder/optimizer/gradients/clip_by_global_norm/truediv"
  input: "decoder/optimizer/gradients/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul/x"
  input: "decoder/optimizer/gradients/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_0"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_1"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/matmul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_2"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_3"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_4"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_5"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/encoder/rnn/rnn/while/rnn/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_7"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_6"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_8"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_7"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_9"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_8"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_10"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_9"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/cell_1/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_11"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_10"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/mul_12"
  op: "Mul"
  input: "decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_3"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_11"
  op: "Identity"
  input: "decoder/optimizer/gradients/clip_by_global_norm/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/optimizer/gradients/gradients/decoder/train_decoder/dynamic_decode/decoder/while/BasicDecoderStep/output_layer/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta1_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta1_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/optimizer/gradients/beta1_power"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta1_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta1_power/Assign"
  op: "AssignVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  input: "decoder/optimizer/gradients/beta1_power/Initializer/initial_value"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta1_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta2_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta2_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/optimizer/gradients/beta2_power"
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta2_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta2_power/Assign"
  op: "AssignVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  input: "decoder/optimizer/gradients/beta2_power/Initializer/initial_value"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/beta2_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "9\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/token_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/token_embeddings/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 57
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam/Assign"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  input: "decoder/encoder/rnn/token_embeddings/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam/read"
  op: "Identity"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "9\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 57
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam_1/Assign"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embeddings/Adam_1/read"
  op: "Identity"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/token_embed_proj/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/token_embed_proj/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam/Assign"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  input: "decoder/encoder/rnn/token_embed_proj/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam/read"
  op: "Identity"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam_1/Assign"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/encoder/rnn/token_embed_proj/Adam_1/read"
  op: "Identity"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\0009\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam/read"
  op: "Identity"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\0009\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 57
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  input: "decoder/decoder/decoder/output_layer/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam/read"
  op: "Identity"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 57
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 57
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/decoder/decoder/output_layer/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.9999997e-05
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.9999997e-05
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/rnn/token_embeddings"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/rnn/token_embed_proj"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/decoder/output_layer/kernel"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/decoder/output_layer/bias"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam/ReadVariableOp_1"
  input: "decoder/optimizer/gradients/Adam/learning_rate"
  input: "decoder/optimizer/gradients/Adam/beta1"
  input: "decoder/optimizer/gradients/Adam/beta2"
  input: "decoder/optimizer/gradients/Adam/epsilon"
  input: "decoder/optimizer/gradients/clip_by_global_norm/decoder/optimizer/gradients/clip_by_global_norm/_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/mul"
  op: "Mul"
  input: "decoder/optimizer/gradients/Adam/ReadVariableOp"
  input: "decoder/optimizer/gradients/Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  input: "decoder/optimizer/gradients/Adam/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  input: "^decoder/optimizer/gradients/Adam/AssignVariableOp"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/mul_1"
  op: "Mul"
  input: "decoder/optimizer/gradients/Adam/ReadVariableOp_2"
  input: "decoder/optimizer/gradients/Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  input: "decoder/optimizer/gradients/Adam/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  input: "^decoder/optimizer/gradients/Adam/AssignVariableOp_1"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam/update"
  op: "NoOp"
  input: "^decoder/optimizer/gradients/Adam/ReadVariableOp_1"
  input: "^decoder/optimizer/gradients/Adam/ReadVariableOp_3"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/bias/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_decoder/decoder/output_layer/kernel/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/ResourceApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embed_proj/ApplyAdam"
  input: "^decoder/optimizer/gradients/Adam/update_encoder/rnn/token_embeddings/ApplyAdam"
}
node {
  name: "decoder/optimizer/gradients/Adam/value"
  op: "Const"
  input: "^decoder/optimizer/gradients/Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "decoder/optimizer/gradients/Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "decoder/optimizer/gradients/Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "decoder/reported_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Assign"
  input: "^decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Assign"
  input: "^decoder/decoder/decoder/output_layer/bias/Adam/Assign"
  input: "^decoder/decoder/decoder/output_layer/bias/Adam_1/Assign"
  input: "^decoder/decoder/decoder/output_layer/kernel/Adam/Assign"
  input: "^decoder/decoder/decoder/output_layer/kernel/Adam_1/Assign"
  input: "^decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Assign"
  input: "^decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Assign"
  input: "^decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Assign"
  input: "^decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Assign"
  input: "^decoder/decoder/output_layer/bias/Assign"
  input: "^decoder/decoder/output_layer/kernel/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Assign"
  input: "^decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Assign"
  input: "^decoder/encoder/rnn/token_embed_proj/Adam/Assign"
  input: "^decoder/encoder/rnn/token_embed_proj/Adam_1/Assign"
  input: "^decoder/encoder/rnn/token_embeddings/Adam/Assign"
  input: "^decoder/encoder/rnn/token_embeddings/Adam_1/Assign"
  input: "^decoder/optimizer/gradients/beta1_power/Assign"
  input: "^decoder/optimizer/gradients/beta2_power/Assign"
  input: "^encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Assign"
  input: "^encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Assign"
  input: "^encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Assign"
  input: "^encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Assign"
  input: "^encoder/rnn/token_embed_proj/Assign"
  input: "^encoder/rnn/token_embeddings/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/rnn/token_embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/rnn/token_embed_proj"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "decoder/decoder/output_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "decoder/decoder/output_layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 39
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 39
          }
        }
        string_val: "global_step"
        string_val: "encoder/rnn/token_embeddings"
        string_val: "encoder/rnn/token_embed_proj"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "decoder/decoder/output_layer/kernel"
        string_val: "decoder/decoder/output_layer/bias"
        string_val: "decoder/optimizer/gradients/beta1_power"
        string_val: "decoder/optimizer/gradients/beta2_power"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam_1"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 39
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 39
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 39
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/rnn/token_embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/rnn/token_embed_proj"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "decoder/decoder/output_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "decoder/decoder/output_layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "decoder/optimizer/gradients/beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "decoder/optimizer/gradients/beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 39
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 39
          }
        }
        string_val: "global_step"
        string_val: "encoder/rnn/token_embeddings"
        string_val: "encoder/rnn/token_embed_proj"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "decoder/decoder/output_layer/kernel"
        string_val: "decoder/decoder/output_layer/bias"
        string_val: "decoder/optimizer/gradients/beta1_power"
        string_val: "decoder/optimizer/gradients/beta2_power"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam_1"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 39
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 39
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 39
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_018d86e3404a484b9e87eec9509ccf4e/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 39
          }
        }
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "decoder/decoder/output_layer/bias"
        string_val: "decoder/decoder/output_layer/kernel"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam_1"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam_1"
        string_val: "decoder/optimizer/gradients/beta1_power"
        string_val: "decoder/optimizer/gradients/beta2_power"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "encoder/rnn/token_embed_proj"
        string_val: "encoder/rnn/token_embeddings"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 39
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Read/ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Read/ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Read/ReadVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Read/ReadVariableOp"
  input: "decoder/decoder/output_layer/bias"
  input: "decoder/decoder/output_layer/kernel"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  input: "decoder/optimizer/gradients/beta1_power/Read/ReadVariableOp"
  input: "decoder/optimizer/gradients/beta2_power/Read/ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Read/ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Read/ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Read/ReadVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Read/ReadVariableOp"
  input: "encoder/rnn/token_embed_proj"
  input: "encoder/rnn/token_embeddings"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 39
          }
        }
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam"
        string_val: "decoder/decoder/decoder/output_layer/bias/Adam_1"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam"
        string_val: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "decoder/decoder/output_layer/bias"
        string_val: "decoder/decoder/output_layer/kernel"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
        string_val: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam"
        string_val: "decoder/encoder/rnn/token_embed_proj/Adam_1"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam"
        string_val: "decoder/encoder/rnn/token_embeddings/Adam_1"
        string_val: "decoder/optimizer/gradients/beta1_power"
        string_val: "decoder/optimizer/gradients/beta2_power"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
        string_val: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
        string_val: "encoder/rnn/token_embed_proj"
        string_val: "encoder/rnn/token_embeddings"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 39
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 39
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "decoder/decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/bias/Adam"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/bias/Adam_1"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "decoder/decoder/decoder/output_layer/kernel/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/bias"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_0/cell_0/kernel"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/bias"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "decoder/decoder/multi_rnn_cell/cell_1/cell_1/kernel"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "decoder/decoder/output_layer/bias"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "decoder/decoder/output_layer/kernel"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/decoder/output_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 57
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias/Adam_1"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel/Adam_1"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias/Adam_1"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "decoder/encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel/Adam_1"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embed_proj/Adam"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embed_proj/Adam_1"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embeddings/Adam"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "decoder/encoder/rnn/token_embeddings/Adam_1"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "decoder/optimizer/gradients/beta1_power"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "decoder/optimizer/gradients/beta2_power"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/bias"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_0/cell_0/kernel"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/bias"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "encoder/rnn/rnn/multi_rnn_cell/cell_1/cell_1/kernel"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "encoder/rnn/token_embed_proj"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embed_proj"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "encoder/rnn/token_embeddings"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/rnn/token_embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 57
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "Dataset_flat_map_read_one_file_23"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "tfrecorddataset"
        type: DT_VARIANT
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
      is_stateful: true
    }
    node_def {
      name: "compression_type"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "arg0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      device: "/device:CPU:0"
    }
    ret {
      key: "tfrecorddataset"
      value: "TFRecordDataset:handle:0"
    }
  }
  function {
    signature {
      name: "Dataset_map_<lambda>_29"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "sparsetodense"
        type: DT_INT64
      }
      output_arg {
        name: "sparsetodense_1"
        type: DT_INT64
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
    }
    node_def {
      name: "ParseSingleExample/ParseSingleExample"
      op: "ParseSingleExample"
      input: "arg0"
      device: "/device:CPU:0"
      attr {
        key: "Tdense"
        value {
          list {
          }
        }
      }
      attr {
        key: "dense_keys"
        value {
          list {
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 2
        }
      }
      attr {
        key: "sparse_keys"
        value {
          list {
            s: "train/inputs"
            s: "train/targets"
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node_def {
      name: "SparseToDense/default_value"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "SparseToDense"
      op: "SparseToDense"
      input: "ParseSingleExample/ParseSingleExample:sparse_indices:0"
      input: "ParseSingleExample/ParseSingleExample:sparse_shapes:0"
      input: "ParseSingleExample/ParseSingleExample:sparse_values:0"
      input: "SparseToDense/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "SparseToDense_1/default_value"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "SparseToDense_1"
      op: "SparseToDense"
      input: "ParseSingleExample/ParseSingleExample:sparse_indices:1"
      input: "ParseSingleExample/ParseSingleExample:sparse_shapes:1"
      input: "ParseSingleExample/ParseSingleExample:sparse_values:1"
      input: "SparseToDense_1/default_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    ret {
      key: "sparsetodense"
      value: "SparseToDense:dense:0"
    }
    ret {
      key: "sparsetodense_1"
      value: "SparseToDense_1:dense:0"
    }
  }
  function {
    signature {
      name: "_make_dataset_8HcFlZxGJL8"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "./dummy_data/paired.tfrecord"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/flat_filenames/shape"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/flat_filenames"
      op: "Reshape"
      input: "TensorSliceDataset/Const:output:0"
      input: "TensorSliceDataset/flat_filenames/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/flat_filenames:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "Dataset_flat_map_read_one_file_23"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "FlatMapDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "Dataset_map_<lambda>_29"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "MapDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 128
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2/Const_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2/Const_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2/Const_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2/Const_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2"
      op: "PaddedBatchDatasetV2"
      input: "RepeatDataset:handle:0"
      input: "PaddedBatchDatasetV2/batch_size:output:0"
      input: "PaddedBatchDatasetV2/Const_3:output:0"
      input: "PaddedBatchDatasetV2/Const_4:output:0"
      input: "PaddedBatchDatasetV2/Const_1:output:0"
      input: "PaddedBatchDatasetV2/Const_2:output:0"
      input: "PaddedBatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "PaddedBatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
